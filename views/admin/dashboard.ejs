<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    
    <!-- Favicon -->
    <link rel="icon" type="image/png" href="/images/icon_lti_v2.png">
    <link rel="shortcut icon" type="image/png" href="/images/icon_lti_v2.png">
    
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .header {
            background-color: #2c3e50;
            color: white;
            padding: 1.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 1.75rem;
            font-weight: 600;
        }
        
        .header .logout-btn {
            background-color: #e74c3c;
            color: white;
            padding: 0.5rem 1.5rem;
            text-decoration: none;
            border-radius: 4px;
            transition: background-color 0.3s;
        }
        
        .header .logout-btn:hover {
            background-color: #c0392b;
        }
        
        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 2rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .stat-card h3 {
            color: #7f8c8d;
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.5rem;
            text-transform: uppercase;
        }
        
        .stat-card .number {
            font-size: 2rem;
            font-weight: 700;
            color: #2c3e50;
        }
        
        .filters {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 1.5rem;
        }
        
        .filters h2 {
            font-size: 1.25rem;
            margin-bottom: 1rem;
            color: #2c3e50;
        }
        
        .filter-row {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
            align-items: end;
        }
        
        .filter-group {
            flex: 1;
            min-width: 200px;
        }
        
        .filter-group label {
            display: block;
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
            color: #666;
        }
        
        .filter-group select,
        .filter-group input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 0.875rem;
        }
        
        .btn {
            padding: 0.5rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.875rem;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: #3498db !important;
            color: white !important; 
        }
        
        .btn-primary:hover {
            background-color: #2980b9;
        }
        
        .logs-table {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .logs-table h2 {
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
            font-size: 1.25rem;
            color: #2c3e50;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
        }
        
        th {
            background-color: #f8f9fa;
            padding: 0.75rem;
            text-align: left;
            font-weight: 600;
            color: #666;
            font-size: 0.875rem;
            border-bottom: 2px solid #eee;
        }
        
        td {
            padding: 0.75rem;
            border-bottom: 1px solid #eee;
            font-size: 0.875rem;
        }
        
        tr:hover {
            background-color: #f8f9fa;
        }
        
        .type-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }
        
        .type-pageVisit {
            background-color: #e3f2fd;
            color: #1976d2;
        }
        
        .type-loginSuccess {
            background-color: #e8f5e9;
            color: #388e3c;
        }
        
        .type-loginFailure {
            background-color: #ffebee;
            color: #d32f2f;
        }
        
        .type-dataUpdate {
            background-color: #f3e5f5;
            color: #7b1fa2;
        }
        
        .type-userBlocked {
            background-color: #ffebee;
            color: #d32f2f;
        }
        
        .type-userUnblocked {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        
        .type-maintenanceToggle {
            background-color: #fff3e0;
            color: #f57c00;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1rem;
            padding: 1.5rem;
        }
        
        .pagination button {
            padding: 0.5rem 1rem;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.875rem;
        }
        
        .pagination button:hover:not(:disabled) {
            background-color: #f8f9fa;
        }
        
        .pagination button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .pagination .page-info {
            font-size: 0.875rem;
            color: #666;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
            color: #666;
        }
        
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #999;
        }
        
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            padding: 20px;
        }
        
        .modal-content {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            width: 100%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            margin: auto;
        }
        
        .modal-close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 24px;
            cursor: pointer;
            color: #666;
            font-weight: bold;
        }
        
        .modal-close:hover {
            color: #333;
        }
        
        /* Mobile Responsive Styles */
        @media (max-width: 768px) {
            .header {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }
            
            .header h1 {
                font-size: 1.5rem;
            }
            
            .header .logout-btn {
                align-self: stretch;
                text-align: center;
            }
            
            .container {
                margin: 1rem auto;
                padding: 0 1rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }
            
            .stat-card {
                padding: 1rem;
            }
            
            .stat-card .number {
                font-size: 1.5rem;
            }
            
            .filters {
                padding: 1rem;
            }
            
            .filters h2 {
                font-size: 1.1rem;
            }
            
            .filter-row {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .filter-group {
                min-width: auto;
            }
            
            .btn {
                padding: 0.75rem 1rem;
                width: 100%;
            }
            
            .logs-table h2 {
                font-size: 1.1rem;
                padding: 1rem;
            }
            
            .logs-table {
                overflow-x: auto;
            }
            
            table {
                min-width: 600px;
            }
            
            th, td {
                padding: 0.5rem;
                font-size: 0.8rem;
            }
            
            .type-badge {
                font-size: 0.7rem;
                padding: 0.2rem 0.5rem;
            }
            
            .pagination {
                padding: 1rem;
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .pagination button {
                width: 100%;
                padding: 0.75rem;
            }
            
            .tab-buttons {
                flex-direction: column;
            }
            
            .tab-btn {
                font-size: 0.9rem;
                padding: 0.75rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
            
            .users-grid {
                gap: 0.5rem;
            }
            
            .user-card {
                flex-direction: column;
                gap: 0.5rem;
                text-align: center;
                word-wrap: break-word;
                overflow-wrap: break-word;
            }
            
            .user-info {
                width: 100%;
                overflow: hidden;
            }
            
            .user-info h4 {
                font-size: 1rem;
                word-break: break-word;
            }
            
            .user-info p {
                font-size: 0.8rem;
                word-break: break-word;
                overflow: hidden;
                text-overflow: ellipsis;
            }
            
            .user-stats {
                text-align: center;
                width: 100%;
            }
            
            .user-stats .credits {
                font-size: 1.1rem;
            }
            
            .modal {
                padding: 10px;
            }
            
            .modal-content {
                padding: 1rem;
                max-width: 100%;
                max-height: 95vh;
            }
            
            .modal-close {
                top: 10px;
                right: 15px;
                font-size: 20px;
            }
        }
        
        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.25rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
            
            .stat-card .number {
                font-size: 1.25rem;
            }
            
            .filters {
                padding: 0.75rem;
            }
            
            .logs-table h2 {
                padding: 0.75rem;
            }
            
            th, td {
                padding: 0.4rem;
                font-size: 0.75rem;
            }
            
            .type-badge {
                font-size: 0.65rem;
                padding: 0.15rem 0.4rem;
            }
            
            .btn {
                font-size: 0.8rem;
                padding: 0.6rem 0.8rem;
            }
            
            .tab-btn {
                font-size: 0.8rem;
                padding: 0.6rem;
            }
            
            .pagination button {
                font-size: 0.8rem;
                padding: 0.6rem;
            }
            
            .modal-content {
                padding: 0.75rem;
            }
            
            .user-card {
                padding: 0.75rem;
            }
            
            .user-info h4 {
                font-size: 0.9rem;
            }
            
            .user-info p {
                font-size: 0.75rem;
            }
            
            .user-stats .credits {
                font-size: 1rem;
            }
        }
        
        .tabs {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        
        .tab-buttons {
            display: flex;
            border-bottom: 2px solid #eee;
        }
        
        .tab-btn {
            flex: 1;
            padding: 1rem;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 1rem;
            color: #666;
            transition: all 0.3s;
        }
        
        .tab-btn.active {
            color: #3498db;
            border-bottom: 2px solid #3498db;
            margin-bottom: -2px;
        }
        
        .tab-content {
            display: none;
            padding: 2rem;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .users-grid {
            display: grid;
            gap: 1rem;
        }
        
        .user-card {
            border: 1px solid #eee;
            padding: 1rem;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .user-info h4 {
            margin-bottom: 0.25rem;
            color: #2c3e50;
        }
        
        .user-info p {
            font-size: 0.875rem;
            color: #666;
        }
        
        .user-stats {
            text-align: right;
        }
        
        .user-stats .credits {
            font-size: 1.25rem;
            font-weight: 600;
            color: #3498db;
        }
        
        .user-stats .last-update {
            font-size: 0.75rem;
            color: #999;
        }
        
        .delete-log-btn {
            background-color: #e74c3c;
            color: white;
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 3px;
            cursor: pointer;
            font-size: 0.75rem;
            transition: background-color 0.2s ease;
        }
        
        .delete-log-btn:hover {
            background-color: #c0392b;
        }
        
        .delete-log-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>Dashboard Administrador - LTI.UY</h1>
        <a href="/admin/logout" class="logout-btn">Cerrar Sesión</a>
    </header>
    
    <div class="container">
        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <h3>Visitas Totales</h3>
                <div class="number"><%= stats.totalVisits %></div>
            </div>
            <div class="stat-card">
                <h3>Visitas Hoy</h3>
                <div class="number"><%= stats.todayVisits %></div>
            </div>
            <div class="stat-card">
                <h3>Logins Exitosos</h3>
                <div class="number"><%= stats.totalLogins %></div>
            </div>
            <div class="stat-card">
                <h3>Logins Fallidos</h3>
                <div class="number"><%= stats.failedLogins %></div>
            </div>
            <div class="stat-card">
                <h3>Visitantes Únicos</h3>
                <div class="number"><%= stats.uniqueVisitors %></div>
            </div>
            <div class="stat-card">
                <h3>Usuarios Registrados</h3>
                <div class="number"><%= stats.totalUsers %></div>
            </div>
            <div class="stat-card">
                <h3>Usuarios Bloqueados</h3>
                <div class="number" style="color: #e74c3c;"><%= stats.blockedUsers %></div>
            </div>
            <div class="stat-card">
                <h3>Usuarios con Intentos Fallidos</h3>
                <div class="number" style="color: #f39c12;"><%= stats.usersWithFailedAttempts %></div>
            </div>
        </div>
        
        <!-- Tabs -->
        <div class="tabs">
            <div class="tab-buttons">
                <button class="tab-btn active" onclick="switchTab('logs')">Logs de Actividad</button>
                <button class="tab-btn" onclick="switchTab('users')">Usuarios</button>
                <button class="tab-btn" onclick="switchTab('security')">Seguridad</button>
                <button class="tab-btn" onclick="switchTab('chats')">Historial de Chats</button>
                <button class="tab-btn" onclick="switchTab('maintenance')">Mantenimiento</button>
                <button class="tab-btn" onclick="switchTab('config')">Configuración</button>
            </div>
            
            <!-- Logs Tab -->
            <div id="logs-tab" class="tab-content active">
                <!-- Filters -->
                <div class="filters">
                    <h2>Filtros</h2>
                    <div class="filter-row">
                        <div class="filter-group">
                            <label for="type-filter">Tipo de Evento</label>
                            <select id="type-filter">
                                <option value="">Todos</option>
                                <option value="pageVisit">Visitas a Páginas</option>
                                <option value="loginSuccess">Logins Exitosos</option>
                                <option value="loginFailure">Logins Fallidos</option>
                                <option value="dataUpdate">Actualizaciones de Datos</option>
                                <option value="userBlocked">Usuarios Bloqueados</option>
                                <option value="userUnblocked">Usuarios Desbloqueados</option>
                                <option value="maintenanceToggle">Cambios de Mantenimiento</option>
                            </select>
                        </div>
                        <div class="filter-group">
                            <label for="username-filter">Usuario</label>
                            <input type="text" id="username-filter" placeholder="Buscar por usuario...">
                        </div>
                        <div class="filter-group">
                            <label for="ip-filter">IP</label>
                            <input type="text" id="ip-filter" placeholder="Buscar por IP...">
                        </div>
                        <div class="filter-group">
                            <label for="start-date">Fecha Inicio</label>
                            <input type="date" id="start-date">
                        </div>
                        <div class="filter-group">
                            <label for="end-date">Fecha Fin</label>
                            <input type="date" id="end-date">
                        </div>
                        <button class="btn btn-primary" onclick="applyFilters()">Aplicar Filtros</button>
                    </div>
                </div>
                
                <!-- Logs Table -->
                <div class="logs-table">
                    <div style="display: flex; justify-content: space-between; align-items: center; padding: 1.5rem; border-bottom: 1px solid #eee;">
                        <h2 style="margin: 0;">Registro de Actividad</h2>
                        <button class="btn btn-danger" onclick="clearLogs()" style="background-color: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px;">
                            🗑️ Limpiar Logs
                        </button>
                    </div>
                    <div id="logs-container">
                        <div class="loading">Cargando logs...</div>
                    </div>
                </div>
            </div>
            
            <!-- Users Tab -->
            <div id="users-tab" class="tab-content">
                <div class="users-container">
                    <div class="loading">Cargando usuarios...</div>
                </div>
            </div>
            
            <!-- Security Tab -->
            <div id="security-tab" class="tab-content">
                <div class="logs-table">
                    <h2>Usuarios Bloqueados y Intentos Fallidos</h2>
                    <div id="security-container">
                        <div class="loading">Cargando información de seguridad...</div>
                    </div>
                </div>
            </div>
            
            <!-- Chats Tab -->
            <div id="chats-tab" class="tab-content">
                <!-- Chat Filters -->
                <div class="filters">
                    <h2>Filtros de Chat</h2>
                    <div class="filter-row">
                        <div class="filter-group">
                            <label for="chat-username-filter">Usuario</label>
                            <input type="text" id="chat-username-filter" placeholder="Buscar por usuario...">
                        </div>
                        <div class="filter-group">
                            <label for="chat-start-date">Fecha Inicio</label>
                            <input type="date" id="chat-start-date">
                        </div>
                        <div class="filter-group">
                            <label for="chat-end-date">Fecha Fin</label>
                            <input type="date" id="chat-end-date">
                        </div>
                        <button class="btn btn-primary" onclick="applyChatFilters()">Aplicar Filtros</button>
                    </div>
                </div>
                
                <!-- Chats Table -->
                <div class="logs-table">
                    <h2>Historial de Conversaciones</h2>
                    <div id="chats-container">
                        <div class="loading">Cargando conversaciones...</div>
                    </div>
                </div>
            </div>
            
            <!-- Maintenance Tab -->
            <div id="maintenance-tab" class="tab-content">
                <div class="logs-table">
                    <h2>Modo de Mantenimiento</h2>
                    <div style="padding: 2rem;">
                        <div id="maintenance-status" style="margin-bottom: 2rem;">
                            <div class="loading">Cargando estado de mantenimiento...</div>
                        </div>
                        
                        <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #3498db;">
                            <h3 style="margin-bottom: 1rem; color: #2c3e50;">Configurar Modo de Mantenimiento</h3>
                            <p style="margin-bottom: 1.5rem; color: #666; line-height: 1.5;">
                                El modo de mantenimiento deshabilitará el acceso al login para usuarios regulares. 
                                El landing page seguirá funcionando normalmente, y los administradores podrán seguir accediendo.
                            </p>
                            
                            <div style="margin-bottom: 1.5rem;">
                                <label for="maintenance-message" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">
                                    Mensaje personalizado:
                                </label>
                                <textarea 
                                    id="maintenance-message" 
                                    rows="3" 
                                    style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; font-family: inherit; resize: vertical;"
                                    placeholder="Escribe el mensaje que verán los usuarios cuando intenten acceder al login...">El sistema se encuentra en mantenimiento. Por favor, intenta más tarde.</textarea>
                            </div>
                            
                            <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                                <button 
                                    id="enable-maintenance-btn" 
                                    onclick="toggleMaintenanceMode(true)" 
                                    class="btn" 
                                    style="background-color: #f39c12; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer;">
                                    🔧 Activar Mantenimiento
                                </button>
                                <button 
                                    id="disable-maintenance-btn" 
                                    onclick="toggleMaintenanceMode(false)" 
                                    class="btn" 
                                    style="background-color: #27ae60; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer;">
                                    ✅ Desactivar Mantenimiento
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Configuration Tab -->
            <div id="config-tab" class="tab-content">
                <div class="logs-table">
                    <h2>Configuración del Sistema</h2>
                    <div style="padding: 2rem;">
                        <!-- Security Configuration -->
                        <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #e74c3c; margin-bottom: 2rem;">
                            <h3 style="margin-bottom: 1rem; color: #2c3e50;">🔐 Configuración de Seguridad</h3>
                            <p style="margin-bottom: 1.5rem; color: #666; line-height: 1.5;">
                                Configura los parámetros de seguridad para los intentos de login y bloqueos de usuarios.
                            </p>
                            
                            <div id="security-config-status" style="margin-bottom: 1.5rem;">
                                <div class="loading">Cargando configuración de seguridad...</div>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; margin-bottom: 1.5rem;">
                                <div>
                                    <label for="max-login-attempts" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">
                                        Máximo de intentos de login:
                                    </label>
                                    <input 
                                        type="number" 
                                        id="max-login-attempts" 
                                        min="1" 
                                        max="10" 
                                        value="3"
                                        style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px;">
                                    <small style="color: #666;">Entre 1 y 10 intentos</small>
                                </div>
                                
                                <div>
                                    <label for="block-duration" style="display: block; margin-bottom: 0.5rem; font-weight: 500;">
                                        Duración del bloqueo (minutos):
                                    </label>
                                    <input 
                                        type="number" 
                                        id="block-duration" 
                                        min="5" 
                                        max="1440" 
                                        value="15"
                                        style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px;">
                                    <small style="color: #666;">Entre 5 minutos y 24 horas</small>
                                </div>
                            </div>
                            
                            <button 
                                id="save-security-config-btn" 
                                onclick="saveSecurityConfig()" 
                                class="btn" 
                                style="background-color: #e74c3c; color: white; padding: 0.75rem 1.5rem; border: none; border-radius: 4px; cursor: pointer;">
                                💾 Guardar Configuración
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let currentPage = 1;
        let totalPages = 1;
        
        // Switch tabs
        function switchTab(tab) {
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            if (tab === 'logs') {
                document.querySelectorAll('.tab-btn')[0].classList.add('active');
                document.getElementById('logs-tab').classList.add('active');
                if (!document.querySelector('#logs-table')) {
                    loadLogs();
                }
            } else if (tab === 'users') {
                document.querySelectorAll('.tab-btn')[1].classList.add('active');
                document.getElementById('users-tab').classList.add('active');
                loadUsers();
            } else if (tab === 'security') {
                document.querySelectorAll('.tab-btn')[2].classList.add('active');
                document.getElementById('security-tab').classList.add('active');
                loadBlockedUsers();
            } else if (tab === 'chats') {
                document.querySelectorAll('.tab-btn')[3].classList.add('active');
                document.getElementById('chats-tab').classList.add('active');
                loadChats();
            } else if (tab === 'maintenance') {
                document.querySelectorAll('.tab-btn')[4].classList.add('active');
                document.getElementById('maintenance-tab').classList.add('active');
                loadMaintenanceStatus();
            } else if (tab === 'config') {
                document.querySelectorAll('.tab-btn')[5].classList.add('active');
                document.getElementById('config-tab').classList.add('active');
                loadSecurityConfig();
            }
        }
        
        // Load logs
        async function loadLogs(page = 1) {
            try {
                const filters = {
                    type: document.getElementById('type-filter').value,
                    username: document.getElementById('username-filter').value,
                    ip: document.getElementById('ip-filter').value,
                    startDate: document.getElementById('start-date').value,
                    endDate: document.getElementById('end-date').value,
                    page: page
                };
                
                const queryString = new URLSearchParams(filters).toString();
                const response = await fetch(`/admin/api/logs?${queryString}`);
                const data = await response.json();
                
                currentPage = data.page;
                totalPages = data.pages;
                
                renderLogs(data.logs);
            } catch (error) {
                console.error('Error loading logs:', error);
                document.getElementById('logs-container').innerHTML = '<div class="empty-state">Error al cargar logs</div>';
            }
        }
        
        // Render logs table
        function renderLogs(logs) {
            if (logs.length === 0) {
                document.getElementById('logs-container').innerHTML = '<div class="empty-state">No se encontraron logs</div>';
                return;
            }
            
            const selectedCount = getSelectedLogIds().length;
            
            let html = `
                <div class="bulk-actions" style="margin-bottom: 1rem; padding: 0.5rem; background: #f8f9fa; border-radius: 4px; display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <label style="margin-right: 1rem;">
                            <input type="checkbox" id="select-all-logs" onchange="toggleAllLogs(this.checked)" style="margin-right: 0.5rem;">
                            Seleccionar todos
                        </label>
                        <span id="selected-count">${selectedCount} seleccionados</span>
                    </div>
                    <button id="delete-selected-btn" class="btn" style="background-color: #dc3545; color: white; opacity: ${selectedCount > 0 ? '1' : '0.5'};" onclick="deleteSelectedLogs()" ${selectedCount === 0 ? 'disabled' : ''}>
                        Eliminar Seleccionados (${selectedCount})
                    </button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th style="width: 40px;">
                                <input type="checkbox" id="header-select-all" onchange="toggleAllLogs(this.checked)" style="margin: 0;">
                            </th>
                            <th>Fecha y Hora</th>
                            <th>Tipo</th>
                            <th>Usuario</th>
                            <th>IP</th>
                            <th>Detalles</th>
                            <th style="width: 80px;">Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            logs.forEach(log => {
                const date = new Date(log.timestamp);
                const formattedDate = date.toLocaleString('es-UY');
                const typeBadgeClass = `type-${log.type}`;
                const typeText = {
                    'pageVisit': 'Visita',
                    'loginSuccess': 'Login Exitoso',
                    'loginFailure': 'Login Fallido',
                    'dataUpdate': 'Actualización',
                    'userBlocked': 'Usuario Bloqueado',
                    'userUnblocked': 'Usuario Desbloqueado',
                    'maintenanceToggle': 'Mantenimiento'
                }[log.type] || log.type;
                
                html += `
                    <tr id="log-row-${log._id}">
                        <td>
                            <input type="checkbox" class="log-checkbox" value="${log._id}" onchange="updateSelectedCount()" style="margin: 0;">
                        </td>
                        <td>${formattedDate}</td>
                        <td><span class="type-badge ${typeBadgeClass}">${typeText}</span></td>
                        <td>${log.username || '-'}</td>
                        <td>${log.ip}</td>
                        <td>${log.details || log.page || '-'}</td>
                        <td>
                            <button 
                                onclick="deleteLog('${log._id}')" 
                                class="delete-log-btn" 
                                title="Eliminar este log">
                                🗑️
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
                <div class="pagination">
                    <button onclick="loadLogs(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Anterior</button>
                    <span class="page-info">Página ${currentPage} de ${totalPages}</span>
                    <button onclick="loadLogs(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Siguiente</button>
                </div>
            `;
            
            document.getElementById('logs-container').innerHTML = html;
        }
        
        // Load users
        async function loadUsers() {
            try {
                const response = await fetch('/admin/api/users');
                const data = await response.json();
                
                if (data.success) {
                    renderUsers(data.users);
                }
            } catch (error) {
                console.error('Error loading users:', error);
                document.querySelector('.users-container').innerHTML = '<div class="empty-state">Error al cargar usuarios</div>';
            }
        }
        
        // Render users
        function renderUsers(users) {
            if (users.length === 0) {
                document.querySelector('.users-container').innerHTML = '<div class="empty-state">No hay usuarios registrados</div>';
                return;
            }
            
            let html = '<div class="users-grid">';
            
            users.forEach(user => {
                const lastUpdate = user.lastDataFetch ? new Date(user.lastDataFetch).toLocaleDateString('es-UY') : 'Nunca';
                const obtainedCredits = user.academicProgress?.obtainedCredits || 0;
                const requiredCredits = user.academicProgress?.requiredCredits || 0;
                const credits = `${obtainedCredits}/${requiredCredits}`;
                const progressLastUpdate = user.academicProgress?.lastUpdated ? 
                    new Date(user.academicProgress.lastUpdated).toLocaleDateString('es-UY') : 'Sin datos';
                
                html += `
                    <div class="user-card">
                        <div class="user-info">
                            <h4>${user.username}</h4>
                            <p>Hash: ${user.userHash}</p>
                            <p>Última actualización: ${lastUpdate}</p>
                            <p>Actualizaciones manuales hoy: ${user.manualRefreshCount}/2</p>
                        </div>
                        <div class="user-stats">
                            <div class="credits">${credits}</div>
                            <div class="last-update">Progreso: ${progressLastUpdate}</div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            document.querySelector('.users-container').innerHTML = html;
        }
        
        // Apply filters
        function applyFilters() {
            loadLogs(1);
        }
        
        // Get selected log IDs
        function getSelectedLogIds() {
            const checkboxes = document.querySelectorAll('.log-checkbox:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }
        
        // Update selected count display
        function updateSelectedCount() {
            const selectedIds = getSelectedLogIds();
            const count = selectedIds.length;
            
            // Update count display
            const countElement = document.getElementById('selected-count');
            if (countElement) {
                countElement.textContent = `${count} seleccionados`;
            }
            
            // Update button state
            const deleteBtn = document.getElementById('delete-selected-btn');
            if (deleteBtn) {
                deleteBtn.disabled = count === 0;
                deleteBtn.style.opacity = count > 0 ? '1' : '0.5';
                deleteBtn.textContent = `Eliminar Seleccionados (${count})`;
            }
            
            // Update header checkbox
            const headerCheckbox = document.getElementById('header-select-all');
            const selectAllCheckbox = document.getElementById('select-all-logs');
            const allCheckboxes = document.querySelectorAll('.log-checkbox');
            
            if (headerCheckbox && selectAllCheckbox && allCheckboxes.length > 0) {
                const allChecked = count === allCheckboxes.length;
                const someChecked = count > 0;
                
                headerCheckbox.checked = allChecked;
                headerCheckbox.indeterminate = someChecked && !allChecked;
                
                selectAllCheckbox.checked = allChecked;
                selectAllCheckbox.indeterminate = someChecked && !allChecked;
            }
        }
        
        // Toggle all logs selection
        function toggleAllLogs(checked) {
            const checkboxes = document.querySelectorAll('.log-checkbox');
            checkboxes.forEach(cb => {
                cb.checked = checked;
            });
            updateSelectedCount();
        }
        
        // Delete selected logs
        async function deleteSelectedLogs() {
            const selectedIds = getSelectedLogIds();
            
            if (selectedIds.length === 0) {
                alert('No hay logs seleccionados');
                return;
            }
            
            if (!confirm(`¿Estás seguro de que quieres eliminar ${selectedIds.length} logs seleccionados? Esta acción no se puede deshacer.`)) {
                return;
            }
            
            try {
                const response = await fetch('/admin/api/logs', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ids: selectedIds })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert(result.message);
                    // Reload logs to update the display
                    loadLogs();
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error deleting selected logs:', error);
                alert('Error al eliminar los logs seleccionados');
            }
        }
        
        // Load chats
        async function loadChats(page = 1) {
            try {
                const filters = {
                    username: document.getElementById('chat-username-filter').value,
                    startDate: document.getElementById('chat-start-date').value,
                    endDate: document.getElementById('chat-end-date').value,
                    page: page
                };
                
                const queryString = new URLSearchParams(filters).toString();
                const response = await fetch(`/admin/api/chat-history?${queryString}`);
                const data = await response.json();
                
                if (data.success) {
                    currentPage = data.currentPage || 1;
                    totalPages = data.totalPages || 1;
                    renderChats(data.chats);
                } else {
                    document.getElementById('chats-container').innerHTML = '<div class="empty-state">Error al cargar chats</div>';
                }
            } catch (error) {
                console.error('Error loading chats:', error);
                document.getElementById('chats-container').innerHTML = '<div class="empty-state">Error al cargar chats</div>';
            }
        }
        
        // Render chats table
        function renderChats(chats) {
            if (chats.length === 0) {
                document.getElementById('chats-container').innerHTML = '<div class="empty-state">No se encontraron conversaciones</div>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Fecha</th>
                            <th>Mensajes</th>
                            <th>Último Mensaje</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            chats.forEach(chat => {
                const date = new Date(chat.metadata.lastActivity).toLocaleString('es-UY');
                const lastMessage = chat.messages && chat.messages.length > 0 
                    ? chat.messages[chat.messages.length - 1]
                    : null;
                
                const preview = lastMessage 
                    ? (lastMessage.role === 'user' ? lastMessage.content : 'Asistente: ' + lastMessage.content)
                    : 'Sin mensajes';
                
                const truncatedPreview = preview.length > 100 ? preview.substring(0, 100) + '...' : preview;
                
                html += `
                    <tr>
                        <td>${chat.userId?.username || 'Usuario eliminado'}</td>
                        <td>${date}</td>
                        <td>${chat.metadata.totalMessages}</td>
                        <td>${truncatedPreview}</td>
                        <td>
                            <button onclick="viewChatDetails('${chat.sessionId}')" class="btn btn-primary" style="font-size: 0.8rem; padding: 4px 8px;">
                                Ver Detalles
                            </button>
                        </td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
                <div class="pagination">
                    <button onclick="loadChats(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>Anterior</button>
                    <span class="page-info">Página ${currentPage} de ${totalPages}</span>
                    <button onclick="loadChats(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>Siguiente</button>
                </div>
            `;
            
            document.getElementById('chats-container').innerHTML = html;
        }
        
        // View chat details
        function viewChatDetails(sessionId) {
            // Create a modal to show chat details
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            modal.innerHTML = `
                <div class="modal-content">
                    <span class="modal-close" onclick="this.parentElement.parentElement.remove()">&times;</span>
                    <h2>Detalles de la Conversación</h2>
                    <div id="chat-details-content">
                        <div class="loading">Cargando conversación...</div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Load chat details
            fetch(`/admin/api/chat-session/${sessionId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.chatSession) {
                        displayChatDetails(data.chatSession);
                    } else {
                        document.getElementById('chat-details-content').innerHTML = '<p>No se pudo cargar la conversación</p>';
                    }
                })
                .catch(error => {
                    console.error('Error loading chat details:', error);
                    document.getElementById('chat-details-content').innerHTML = '<p>Error al cargar la conversación</p>';
                });
        }
        
        // Display chat details
        function displayChatDetails(chatSession) {
            let html = `
                <div style="margin-bottom: 20px;">
                    <strong>ID de Sesión:</strong> ${chatSession.sessionId}<br>
                    <strong>Total de Mensajes:</strong> ${chatSession.metadata.totalMessages}<br>
                    <strong>Última Actividad:</strong> ${new Date(chatSession.metadata.lastActivity).toLocaleString('es-UY')}
                </div>
                <div style="max-height: 400px; overflow-y: auto; border: 1px solid #ddd; padding: 15px; border-radius: 5px;">
            `;
            
            chatSession.messages.forEach(msg => {
                const time = new Date(msg.timestamp).toLocaleString('es-UY');
                const role = msg.role === 'user' ? 'Usuario' : 'Asistente';
                const bgColor = msg.role === 'user' ? '#e3f2fd' : '#f5f5f5';
                
                html += `
                    <div style="margin-bottom: 15px; padding: 10px; background-color: ${bgColor}; border-radius: 5px;">
                        <div style="font-weight: bold; margin-bottom: 5px; color: #666; font-size: 0.9rem;">
                            ${role} - ${time}
                        </div>
                        <div style="line-height: 1.4;">
                            ${msg.content.replace(/\n/g, '<br>')}
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            document.getElementById('chat-details-content').innerHTML = html;
        }
        
        // Apply chat filters
        function applyChatFilters() {
            loadChats(1);
        }
        
        // Load blocked users
        async function loadBlockedUsers() {
            try {
                const response = await fetch('/admin/api/blocked-users');
                const data = await response.json();
                
                if (data.success) {
                    renderBlockedUsers(data.users);
                } else {
                    document.getElementById('security-container').innerHTML = '<div class="empty-state">Error al cargar usuarios bloqueados</div>';
                }
            } catch (error) {
                console.error('Error loading blocked users:', error);
                document.getElementById('security-container').innerHTML = '<div class="empty-state">Error al cargar usuarios bloqueados</div>';
            }
        }
        
        // Render blocked users table
        function renderBlockedUsers(users) {
            if (users.length === 0) {
                document.getElementById('security-container').innerHTML = '<div class="empty-state">No hay usuarios con problemas de seguridad</div>';
                return;
            }
            
            let html = `
                <table>
                    <thead>
                        <tr>
                            <th>Usuario</th>
                            <th>Estado</th>
                            <th>Intentos Fallidos</th>
                            <th>Bloqueado Desde</th>
                            <th>Tiempo Restante</th>
                            <th>IP</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            users.forEach(user => {
                const blockedDate = user.blockedAt ? new Date(user.blockedAt).toLocaleString('es-UY') : '-';
                let statusBadge = '';
                let timeRemaining = '-';
                let actions = '';
                
                switch (user.status) {
                    case 'blocked':
                        statusBadge = '<span class="type-badge" style="background-color: #ffebee; color: #d32f2f;">Bloqueado</span>';
                        timeRemaining = user.remainingTime > 0 ? `${user.remainingTime} min` : '-';
                        actions = `<button onclick="unblockUser('${user.username}')" class="btn btn-primary" style="font-size: 0.8rem; padding: 4px 8px;">Desbloquear</button>`;
                        break;
                    case 'expired':
                        statusBadge = '<span class="type-badge" style="background-color: #fff3e0; color: #f57c00;">Expirado</span>';
                        actions = `<button onclick="unblockUser('${user.username}')" class="btn btn-primary" style="font-size: 0.8rem; padding: 4px 8px;">Limpiar</button>`;
                        break;
                    case 'warning':
                        statusBadge = '<span class="type-badge" style="background-color: #fff8e1; color: #f9a825;">Advertencia</span>';
                        actions = `<button onclick="unblockUser('${user.username}')" class="btn btn-primary" style="font-size: 0.8rem; padding: 4px 8px;">Resetear</button>`;
                        break;
                    default:
                        statusBadge = '<span class="type-badge" style="background-color: #e8f5e9; color: #388e3c;">Activo</span>';
                }
                
                html += `
                    <tr>
                        <td>${user.username}</td>
                        <td>${statusBadge}</td>
                        <td>${user.failedLoginAttempts}/3</td>
                        <td>${blockedDate}</td>
                        <td>${timeRemaining}</td>
                        <td>${user.ipAddress || '-'}</td>
                        <td>${actions}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>
            `;
            
            document.getElementById('security-container').innerHTML = html;
        }
        
        // Unblock user function
        async function unblockUser(username) {
            if (!confirm(`¿Estás seguro de que quieres desbloquear/resetear el usuario ${username}?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/admin/api/unblock-user/${username}`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(data.message);
                    loadBlockedUsers(); // Reload the table
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error unblocking user:', error);
                alert('Error al desbloquear usuario');
            }
        }
        
        // Clear logs function
        async function clearLogs() {
            if (!confirm('¿Estás seguro de que quieres limpiar todos los logs? Esta acción no se puede deshacer.')) {
                return;
            }
            
            try {
                const response = await fetch('/admin/api/clear-logs', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(`Logs limpiados exitosamente. Se eliminaron ${data.deletedCount} registros.`);
                    loadLogs(); // Reload the logs table
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error clearing logs:', error);
                alert('Error al limpiar logs');
            }
        }
        
        // Load security config
        async function loadSecurityConfig() {
            try {
                const response = await fetch('/admin/api/security-config');
                const data = await response.json();
                
                if (data.success) {
                    renderSecurityConfig(data.config);
                } else {
                    document.getElementById('security-config-status').innerHTML = '<div class="empty-state">Error al cargar configuración de seguridad</div>';
                }
            } catch (error) {
                console.error('Error loading security config:', error);
                document.getElementById('security-config-status').innerHTML = '<div class="empty-state">Error de conexión</div>';
            }
        }
        
        // Render security config
        function renderSecurityConfig(config) {
            const html = `
                <div style="background: #e8f5e8; padding: 1rem; border-radius: 4px; border-left: 3px solid #27ae60;">
                    <strong>📊 Configuración Actual:</strong><br>
                    <strong>Máximo de intentos:</strong> ${config.maxLoginAttempts}<br>
                    <strong>Duración del bloqueo:</strong> ${config.blockDurationMinutes} minutos<br>
                    ${config.lastUpdated ? `<small>Última actualización: ${new Date(config.lastUpdated).toLocaleString()}</small>` : ''}
                    ${config.updatedBy ? `<small> por ${config.updatedBy}</small>` : ''}
                </div>
            `;
            
            document.getElementById('security-config-status').innerHTML = html;
            
            // Update form values
            document.getElementById('max-login-attempts').value = config.maxLoginAttempts;
            document.getElementById('block-duration').value = config.blockDurationMinutes;
        }
        
        // Save security config
        async function saveSecurityConfig() {
            const maxLoginAttempts = parseInt(document.getElementById('max-login-attempts').value);
            const blockDurationMinutes = parseInt(document.getElementById('block-duration').value);
            
            // Validate inputs
            if (maxLoginAttempts < 1 || maxLoginAttempts > 10) {
                alert('El máximo de intentos debe estar entre 1 y 10');
                return;
            }
            
            if (blockDurationMinutes < 5 || blockDurationMinutes > 1440) {
                alert('La duración del bloqueo debe estar entre 5 minutos y 24 horas');
                return;
            }
            
            if (!confirm('¿Estás seguro de que quieres actualizar la configuración de seguridad?')) {
                return;
            }
            
            const button = document.getElementById('save-security-config-btn');
            const originalText = button.innerHTML;
            button.innerHTML = '⏳ Guardando...';
            button.disabled = true;
            
            try {
                const response = await fetch('/admin/api/security-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        maxLoginAttempts: maxLoginAttempts,
                        blockDurationMinutes: blockDurationMinutes
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('✅ Configuración actualizada correctamente');
                    renderSecurityConfig(data.config);
                } else {
                    alert('❌ Error: ' + data.message);
                }
            } catch (error) {
                console.error('Error saving security config:', error);
                alert('❌ Error de conexión al guardar la configuración');
            } finally {
                button.innerHTML = originalText;
                button.disabled = false;
            }
        }
        
        // Load maintenance status
        async function loadMaintenanceStatus() {
            try {
                const response = await fetch('/admin/api/maintenance-status');
                const data = await response.json();
                
                if (data.success) {
                    renderMaintenanceStatus(data.config);
                } else {
                    document.getElementById('maintenance-status').innerHTML = '<div class="empty-state">Error al cargar estado de mantenimiento</div>';
                }
            } catch (error) {
                console.error('Error loading maintenance status:', error);
                document.getElementById('maintenance-status').innerHTML = '<div class="empty-state">Error al cargar estado de mantenimiento</div>';
            }
        }
        
        // Render maintenance status
        function renderMaintenanceStatus(config) {
            const statusColor = config.isMaintenanceMode ? '#e74c3c' : '#27ae60';
            const statusText = config.isMaintenanceMode ? 'ACTIVADO' : 'DESACTIVADO';
            const statusIcon = config.isMaintenanceMode ? '🔧' : '✅';
            
            let enabledInfo = '';
            if (config.isMaintenanceMode && config.enabledAt) {
                const enabledDate = new Date(config.enabledAt).toLocaleString('es-UY');
                enabledInfo = `
                    <p style="margin: 0.5rem 0; color: #666;">
                        <strong>Activado:</strong> ${enabledDate}
                        ${config.enabledBy ? ` por ${config.enabledBy}` : ''}
                    </p>
                `;
            }
            
            const html = `
                <div style="background: white; padding: 1.5rem; border-radius: 8px; border-left: 4px solid ${statusColor};">
                    <div style="display: flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                        <span style="font-size: 1.5rem;">${statusIcon}</span>
                        <div>
                            <h3 style="margin: 0; color: #2c3e50;">Estado del Sistema</h3>
                            <p style="margin: 0; color: ${statusColor}; font-weight: 600; font-size: 1.1rem;">
                                Modo Mantenimiento: ${statusText}
                            </p>
                        </div>
                    </div>
                    ${enabledInfo}
                    ${config.isMaintenanceMode ? `
                        <div style="background: #fff3cd; padding: 1rem; border-radius: 4px; border-left: 3px solid #ffc107; margin-top: 1rem;">
                            <strong>Mensaje actual:</strong><br>
                            <em>${config.maintenanceMessage}</em>
                        </div>
                    ` : ''}
                </div>
            `;
            
            document.getElementById('maintenance-status').innerHTML = html;
            
            // Update textarea with current message
            document.getElementById('maintenance-message').value = config.maintenanceMessage;
            
            // Update button states
            const enableBtn = document.getElementById('enable-maintenance-btn');
            const disableBtn = document.getElementById('disable-maintenance-btn');
            
            if (config.isMaintenanceMode) {
                enableBtn.style.opacity = '0.5';
                enableBtn.disabled = true;
                disableBtn.style.opacity = '1';
                disableBtn.disabled = false;
            } else {
                enableBtn.style.opacity = '1';
                enableBtn.disabled = false;
                disableBtn.style.opacity = '0.5';
                disableBtn.disabled = true;
            }
        }
        
        // Toggle maintenance mode
        async function toggleMaintenanceMode(enabled) {
            const message = document.getElementById('maintenance-message').value.trim();
            
            if (enabled && !message) {
                alert('Por favor, ingresa un mensaje de mantenimiento');
                return;
            }
            
            const action = enabled ? 'activar' : 'desactivar';
            if (!confirm(`¿Estás seguro de que quieres ${action} el modo de mantenimiento?`)) {
                return;
            }
            
            try {
                const response = await fetch('/admin/api/toggle-maintenance', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        enabled: enabled,
                        message: message
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(data.message);
                    loadMaintenanceStatus(); // Reload status
                } else {
                    alert(`Error: ${data.message}`);
                }
            } catch (error) {
                console.error('Error toggling maintenance mode:', error);
                alert('Error al cambiar modo de mantenimiento');
            }
        }
        
        // Delete specific log
        async function deleteLog(logId) {
            if (!confirm('¿Estás seguro de que quieres eliminar este log? Esta acción no se puede deshacer.')) {
                return;
            }
            
            const logRow = document.getElementById(`log-row-${logId}`);
            const deleteButton = logRow.querySelector('button');
            const originalContent = deleteButton.innerHTML;
            
            // Show loading state
            deleteButton.innerHTML = '⏳';
            deleteButton.disabled = true;
            
            try {
                const response = await fetch(`/admin/api/logs/${logId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Remove the row from the table with animation
                    logRow.style.transition = 'opacity 0.3s ease';
                    logRow.style.opacity = '0';
                    
                    setTimeout(() => {
                        logRow.remove();
                        
                        // Check if table is now empty
                        const tbody = document.querySelector('#logs-container tbody');
                        if (tbody && tbody.children.length === 0) {
                            document.getElementById('logs-container').innerHTML = '<div class="empty-state">No se encontraron logs</div>';
                        }
                    }, 300);
                    
                    // Show success message briefly
                    const tempMessage = document.createElement('div');
                    tempMessage.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #27ae60; color: white; padding: 1rem; border-radius: 4px; z-index: 1000;';
                    tempMessage.textContent = '✅ Log eliminado exitosamente';
                    document.body.appendChild(tempMessage);
                    
                    setTimeout(() => {
                        document.body.removeChild(tempMessage);
                    }, 3000);
                } else {
                    alert('❌ Error: ' + data.message);
                    deleteButton.innerHTML = originalContent;
                    deleteButton.disabled = false;
                }
            } catch (error) {
                console.error('Error deleting log:', error);
                alert('❌ Error de conexión al eliminar el log');
                deleteButton.innerHTML = originalContent;
                deleteButton.disabled = false;
            }
        }
        
        // Load logs on page load
        document.addEventListener('DOMContentLoaded', () => {
            loadLogs();
        });
    </script>
</body>
</html>