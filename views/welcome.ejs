<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hola - LTI.UY</title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .progress-container {
            margin-top: 30px;
        }
        
        .progress-widget {
            background-color: var(--bg-light);
            padding: 30px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .progress-bar-container {
            background-color: #e0e0e0;
            border-radius: 20px;
            height: 30px;
            overflow: hidden;
            position: relative;
            margin: 20px 0;
        }
        
        .progress-bar {
            background: linear-gradient(90deg, #2ecc71, #27ae60);
            height: 100%;
            border-radius: 20px;
            transition: width 1s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .credits-info {
            display: flex;
            justify-content: space-between;
            margin: 20px 0;
        }
        
        .subjects-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        
        .subjects-table th, .subjects-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }
        
        .subjects-table th {
            background-color: var(--utec-primary);
            color: white;
        }
        
        .subject-passed {
            background-color: #d4edda;
            color: #155724;
        }
        
        .subject-pending {
            background-color: #f8f9fa;
            color: #6c757d;
        }
        
        .btn-refresh {
            background: linear-gradient(135deg, var(--utec-accent), #0056b3);
            color: black;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 2px 6px rgba(0, 86, 179, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-refresh:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 86, 179, 0.4);
            background: linear-gradient(135deg, #0056b3, var(--utec-accent));
        }
        
        .btn-refresh:active {
            transform: translateY(0);
            box-shadow: 0 2px 6px rgba(0, 86, 179, 0.3);
        }
        
        .btn-refresh:disabled {
            background: linear-gradient(135deg, #ccc, #999);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }
        
        .btn-refresh:disabled:hover {
            transform: none;
            box-shadow: none;
        }
        
        .subject-not-taken {
            background-color: #f5f5f5;
            color: #999;
        }
        
        .subject-taken {
            background-color: #e8f5e9;
            color: #2e7d32;
        }
        
        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        
        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            width: 80%;
            max-width: 400px;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
        
        /* Additional mobile styles for welcome page */
        @media (max-width: 768px) {
            .navbar-brand {
                font-size: 1.2rem;
            }
            
            .navbar-logo {
                height: 48px;
                background-color: white;
                border-radius: 50%;
                padding: 5px;
            }
            
            .btn-danger {
                font-size: 0.9rem;
                padding: 8px 16px;
            }
            
            .progress-widget {
                padding: 20px 15px;
            }
            
            .credits-info {
                flex-direction: column;
                gap: 10px;
            }
            
            .credits-info div {
                text-align: center;
            }
            
            .subjects-table {
                font-size: 0.85rem;
            }
            
            .subjects-table th,
            .subjects-table td {
                padding: 8px 4px;
            }
            
            .modal-content {
                width: 95%;
                margin: 20% auto;
                padding: 20px;
            }
            
            .btn-refresh {
                width: 100%;
                margin-bottom: 10px;
            }
            
            .plan-switcher {
                margin-bottom: 15px;
            }
            
            .plan-switcher label {
                display: block;
                margin-bottom: 5px;
            }
            
            .plan-switcher select {
                width: 100%;
                padding: 8px;
                font-size: 1rem;
            }
            
            .refresh-info {
                text-align: center;
            }
        }
        
        @media (max-width: 480px) {
            .welcome-header h1 {
                font-size: 1.4rem;
            }
            
            .welcome-header p {
                font-size: 0.9rem;
            }
            
            .progress-widget {
                padding: 15px 10px;
            }
            
            .subjects-table {
                font-size: 0.8rem;
            }
            
            .subjects-table th,
            .subjects-table td {
                padding: 6px 2px;
            }
            
            .btn-refresh {
                font-size: 0.9rem;
                padding: 10px 16px;
            }
            
            .modal-content {
                width: 98%;
                margin: 15% auto;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container" style="display: flex; justify-content: space-between; align-items: center;">
            <a href="/" class="navbar-brand">
                <img src="/images/icon_lti_v2.png" alt="LTI.UY Logo" class="navbar-logo">
                LTI.UY
            </a>
            <a href="/logout" class="btn btn-danger">Cerrar Sesión</a>
        </div>
    </nav>

    <div class="welcome-container">
        <div class="welcome-header">
            <h1>¡Hola, <%= user.split('.')[0].charAt(0).toUpperCase() + user.split('.')[0].slice(1) %>!</h1>
            <p>Tu progreso académico de la Licenciatura en Tecnologías de la Información</p>
        </div>
            
            <div id="progressContainer" class="progress-section">
                <div class="loading" id="loadingIndicator">
                    <p>Cargando progreso académico...</p>
                    <div class="spinner"></div>
                </div>
                
                <div id="progressContent" style="display: none;">
                    <div class="progress-header">
                        <h2>Tu Progreso Académico</h2>
                        <div class="progress-controls">
                            <div class="plan-selector">
                                <label for="planSelect">Plan de Carrera:</label>
                                <select id="planSelect" onchange="changePlan()">
                                    <option value="">Cargando planes...</option>
                                </select>
                            </div>
                            <div class="refresh-info" id="refreshInfo">
                                <button class="btn-refresh" id="refreshButton" onclick="showPasswordModal()">
                                    Actualizar ahora (<span id="refreshesLeft">2</span> disponibles)
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="progress-bar-container">
                        <div class="progress-bar" id="progressBar" style="width: 0%;">
                            <span id="progressText" style="font-size: 1.2rem; font-weight: bold; color: white;">0%</span>
                        </div>
                    </div>
                    
                    <div class="progress-stats">
                        <div class="progress-stat">
                            <div class="stat-number" id="totalCredits">0</div>
                            <div class="stat-label">Créditos obtenidos</div>
                        </div>
                        <div class="progress-stat">
                            <div class="stat-number" id="requiredCredits">360</div>
                            <div class="stat-label">Créditos requeridos</div>
                        </div>
                        <div class="progress-stat">
                            <div class="stat-number" id="remainingCredits">360</div>
                            <div class="stat-label">Créditos restantes</div>
                        </div>
                    </div>
                    
                    <p id="updateStatus" style="text-align: center; color: var(--text-light); font-size: 0.9rem; margin-top: 15px;">
                        Los datos se actualizan automáticamente una vez al día cuando inicias sesión.
                    </p>
                </div>
                
                <div style="background-color: var(--bg-light); padding: 30px; border-radius: 10px; margin-top: 30px;">
                    <h3 style="color: var(--utec-dark); margin-bottom: 20px;">
                        Asignaturas del Expediente
                    </h3>
                    
                    <div class="table-container">
                        <table class="subjects-table" id="subjectsTable">
                            <thead>
                                <tr>
                                    <th>Semestre</th>
                                    <th>Asignatura</th>
                                    <th>Créditos</th>
                                    <th>Tipo</th>
                                    <th>Convocatoria</th>
                                    <th>Calificación</th>
                                </tr>
                            </thead>
                            <tbody id="subjectsBody">
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Additional subjects not in career plan -->
                    <div id="additionalSubjectsContainer" style="display: none; margin-top: 30px;">
                        <h3 style="color: var(--utec-dark); margin-bottom: 20px;">
                            Optativas, VME y APEs
                        </h3>
                        <div class="table-container">
                            <table class="subjects-table" id="additionalSubjectsTable">
                                <thead>
                                    <tr>
                                        <th>Asignatura</th>
                                        <th>Créditos</th>
                                        <th>Tipo</th>
                                        <th>Convocatoria</th>
                                        <th>Calificación</th>
                                    </tr>
                                </thead>
                                <tbody id="additionalSubjectsBody">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
                
                <div id="noDataMessage" style="display: none;">
                    <div class="refresh-info">
                        <p>Los datos de progreso académico se estan obteniendo en segundo plano.</p>
                        <p>Los datos se cargarán automáticamente en segundos.</p>
                        <button class="btn-refresh" id="fetchDataButton" onclick="showPasswordModal()" style="margin-top: 15px;">
                            Traer datos ahora
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Password Modal -->
    <div id="passwordModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closePasswordModal()">&times;</span>
            <h3>Confirmar contraseña</h3>
            <p>Por seguridad, ingresa tu contraseña para actualizar los datos:</p>
            <input type="password" id="passwordInput" class="form-control" style="width: 100%; margin: 10px 0;">
            <div style="text-align: right; margin-top: 20px;">
                <button onclick="closePasswordModal()" class="btn" style="margin-right: 10px;">Cancelar</button>
                <button onclick="refreshProgress()" class="btn btn-primary">Actualizar</button>
            </div>
        </div>
    </div>

    <%- include('partials/footer', { marginTop: '100px', showTerms: true }) %>

    <script>
        const userHash = '<%= session.userHash %>';
        let currentCareerPlan = null;
        let studentProgress = null;
        
        // Load academic progress on page load
        window.onload = function() {
            loadPlans();
            loadAcademicProgress();
        };
        
        function loadPlans() {
            fetch('/auth/career-plans')
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById('planSelect');
                    select.innerHTML = '<option value="">Seleccionar plan...</option>';
                    
                    if (data.success && data.plans) {
                        data.plans.forEach(plan => {
                            const option = document.createElement('option');
                            option.value = plan._id;
                            option.textContent = `${plan.name} (${plan.totalCredits} créditos)`;
                            if (plan._id === data.selectedPlan) {
                                option.selected = true;
                                currentCareerPlan = plan;
                            }
                            select.appendChild(option);
                        });
                        
                        // If no plan selected, use the first one
                        if (!currentCareerPlan && data.plans.length > 0) {
                            currentCareerPlan = data.plans[0];
                        }
                        
                        // Update display if student progress is already loaded
                        if (studentProgress !== null) {
                            displayProgress(studentProgress);
                        }
                    }
                })
                .catch(error => {
                    console.error('Error loading plans:', error);
                    document.getElementById('planSelect').innerHTML = '<option value="">Error cargando planes</option>';
                });
        }
        
        function changePlan() {
            const planId = document.getElementById('planSelect').value;
            
            if (!planId) return;
            
            fetch('/auth/change-plan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ planId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update current career plan
                    fetch('/auth/career-plans')
                        .then(response => response.json())
                        .then(planData => {
                            if (planData.success && planData.plans) {
                                currentCareerPlan = planData.plans.find(plan => plan._id === planId);
                                displayProgress(studentProgress); // Refresh display with new plan
                            }
                        });
                } else {
                    alert(data.message || 'Error al cambiar plan');
                }
            })
            .catch(error => {
                console.error('Error changing plan:', error);
                alert('Error al cambiar plan');
            });
        }
        
        function loadAcademicProgress() {
            document.getElementById('loadingIndicator').style.display = 'block';
            document.getElementById('progressContent').style.display = 'none';
            document.getElementById('noDataMessage').style.display = 'none';
            
            fetch(`/auth/academic-progress/${userHash}`)
                .then(response => response.json())
                .then(data => {
                    document.getElementById('loadingIndicator').style.display = 'none';
                    
                    if (data.success && data.data) {
                        studentProgress = data.data;
                        displayProgress(data.data);
                        updateRefreshButton(data.canManualRefresh, data.manualRefreshesLeft);
                        document.getElementById('progressContent').style.display = 'block';
                    } else {
                        studentProgress = null;
                        displayProgress(null);
                        document.getElementById('progressContent').style.display = 'block';
                        if (data.canManualRefresh !== undefined) {
                            updateRefreshButton(data.canManualRefresh, data.manualRefreshesLeft);
                            updateFetchDataButton(data.canManualRefresh, data.manualRefreshesLeft);
                        }
                    }
                    
                    if (data.needsUpdate) {
                        document.getElementById('updateStatus').textContent = 
                            'Los datos se están actualizando en segundo plano...';
                        // Check again in 30 seconds
                        setTimeout(loadAcademicProgress, 30000);
                    }
                })
                .catch(error => {
                    console.error('Error loading progress:', error);
                    document.getElementById('loadingIndicator').style.display = 'none';
                    document.getElementById('noDataMessage').style.display = 'block';
                });
        }
        
        // Function to normalize subject names for comparison
        function normalizeSubjectName(name) {
            return name
                // Remove codes in parentheses (TIN_XXX)
                .replace(/\s*\([^)]*\)$/g, '')
                // Normalize specific terms before lowercasing
                .replace(/devops/gi, 'DevOps')
                .replace(/\btesting\b/gi, 'Testing')
                // Convert to lowercase for comparison
                .toLowerCase()
                // Normalize Fundamento/Fundamentos
                .replace(/\bfundamento\b/g, 'fundamentos')
                // Normalize "del" to "de" for consistency
                .replace(/\bdel\b/g, 'de')
                // Normalize project names - remove "y testing" from development projects
                .replace(/\bproyecto\s+de\s+desarrollo\s+y\s+testing\b/g, 'proyecto de desarrollo')
                // Normalize "Proyecto Final Tecnicatura" vs "Proyecto final de Tecnicatura"
                .replace(/\bproyecto\s+final\s+de\s+tecnicatura\b/g, 'proyecto final tecnicatura')
                .replace(/\bproyecto\s+final\s+tecnicatura\b/g, 'proyecto final tecnicatura')
                // Normalize spaces around "/" for consistency
                .replace(/\s*\/\s*/g, ' / ')
                // Normalize "Taller de ciberseguridad" variations
                .replace(/\btaller\s+de\s+ciberseguridad\s+vinculado\s+a\s+desarrollo\s+en\s+la\s+nube\b/g, 'taller de ciberseguridad vinculado con la nube')
                .replace(/\btaller\s+de\s+ciberseguridad\s+vinculado\s+con\s+la\s+nube\b/g, 'taller de ciberseguridad vinculado con la nube')
                // Normalize "Diseño de experiencia de usuario (UX)" to match "Diseño de experiencia"
                .replace(/\bdiseño\s+de\s+experiencia\s+de\s+usuario\s*\(ux\)\b/g, 'diseño de experiencia')
                .replace(/\bdiseño\s+de\s+experiencia\s+usuario\b/g, 'diseño de experiencia')
                // Normalize "Ética, Tecnología y Sociedad" variations
                .replace(/\bética,?\s+tecnología\s+y\s+sociedad\b/g, 'ética tecnología y sociedad')
                // Normalize multiple spaces
                .replace(/\s+/g, ' ')
                .trim();
        }
        
        // Function to extract English level from subject name
        function extractEnglishLevel(name) {
            // Roman numerals to Arabic numbers
            const romanMap = { 'I': 1, 'II': 2, 'III': 3, 'IV': 4, 'V': 5, 'VI': 6 };
            
            // Look for roman numerals
            const romanMatch = name.match(/(?:Semestre\s+)?([IVX]+)/i);
            if (romanMatch) {
                return romanMap[romanMatch[1]] || null;
            }
            
            // Look for arabic numbers
            const arabicMatch = name.match(/(?:Inglés\s+)?(\d+)/i);
            if (arabicMatch) {
                return parseInt(arabicMatch[1]);
            }
            
            return null;
        }
        
        // Function to match English subjects with different formats
        function matchEnglishSubject(portalName, planName) {
            const portalNorm = normalizeSubjectName(portalName);
            const planNorm = normalizeSubjectName(planName);
            
            // If both contain "inglés"
            if (portalNorm.includes('inglés') && planNorm.includes('inglés')) {
                // Extract numbers (roman or arabic)
                const portalNum = extractEnglishLevel(portalName);
                const planNum = extractEnglishLevel(planName);
                
                if (portalNum && planNum) {
                    return portalNum === planNum;
                }
                
                // If no numbers found, do basic text comparison
                return portalNorm === planNorm;
            }
            return false;
        }

        function displayProgress(data) {
            // Update progress bar
            const progressFill = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            
            // Will calculate progress percentage after getting total credits including additional subjects
            let progressPercentage = 0;
            
            // Update subjects table
            const tbody = document.getElementById('subjectsBody');
            tbody.innerHTML = '';
            
            // Track subjects that match the career plan
            const matchedSubjects = [];
            
            if (!currentCareerPlan || !currentCareerPlan.subjects || currentCareerPlan.subjects.length === 0) {
                // Show no data message
                const row = tbody.insertRow();
                const cell = row.insertCell(0);
                cell.colSpan = 6;
                cell.style.textAlign = 'center';
                cell.style.padding = '40px';
                cell.style.color = '#666';
                cell.innerHTML = '<em>No se encontraron datos de asignaturas</em>';
            } else {
                // Sort subjects by semester and exclude optativas
                const sortedSubjects = currentCareerPlan.subjects
                    .filter(subject => !subject.name.toLowerCase().includes('optativa'))
                    .sort((a, b) => a.semester - b.semester);
                
                sortedSubjects.forEach(planSubject => {
                    const row = tbody.insertRow();
                    
                    // Find if this subject is in the student's progress
                    let studentSubject = null;
                    if (data && data.subjects) {
                        studentSubject = data.subjects.find(s => {
                            const portalName = normalizeSubjectName(s.name);
                            const planName = normalizeSubjectName(planSubject.name);
                            
                            // Exact normalized comparison
                            if (portalName === planName) return true;
                            
                            // Special comparison for English subjects
                            if (matchEnglishSubject(s.name, planSubject.name)) return true;
                            
                            return false;
                        });
                    }
                    
                    // Track matched subjects
                    if (studentSubject) {
                        matchedSubjects.push(studentSubject);
                    }
                    
                    // Set row class based on whether subject is taken
                    if (studentSubject) {
                        row.className = 'subject-taken';
                    } else {
                        row.className = 'subject-not-taken';
                    }
                    
                    row.insertCell(0).textContent = planSubject.semester;
                    row.insertCell(1).textContent = planSubject.name;
                    row.insertCell(2).textContent = planSubject.credits;
                    row.insertCell(3).textContent = studentSubject ? studentSubject.type : '-';
                    row.insertCell(4).textContent = studentSubject ? (studentSubject.convocatoria || '-') : '-';
                    row.insertCell(5).textContent = studentSubject ? (studentSubject.grade || '-') : '-';
                });
            }
            
            // Update additional subjects table (subjects not in career plan)
            const additionalTBody = document.getElementById('additionalSubjectsBody');
            const additionalContainer = document.getElementById('additionalSubjectsContainer');
            additionalTBody.innerHTML = '';
            
            if (data && data.subjects) {
                // Find subjects that are not in the career plan and exclude English subjects
                const additionalSubjects = data.subjects.filter(studentSubject => {
                    // Exclude if it matches a subject in the career plan
                    if (matchedSubjects.some(matched => matched.name === studentSubject.name)) {
                        return false;
                    }
                    
                    // Exclude English subjects and Vinculación con el Medio
                    const subjectName = studentSubject.name.toLowerCase();
                    if (subjectName.includes('inglés') || subjectName.includes('ingles') || subjectName.includes('english')) {
                        return false;
                    }
                    if (subjectName.includes('vinculación con el medio') || subjectName.includes('vinculacion con el medio')) {
                        return false;
                    }
                    
                    return true;
                });
                
                if (additionalSubjects.length > 0) {
                    additionalContainer.style.display = 'block';
                    
                    additionalSubjects.forEach(subject => {
                        const row = additionalTBody.insertRow();
                        row.className = 'subject-taken'; // These are all taken subjects
                        
                        row.insertCell(0).textContent = subject.name;
                        row.insertCell(1).textContent = subject.credits;
                        row.insertCell(2).textContent = subject.type;
                        row.insertCell(3).textContent = subject.convocatoria || '-';
                        row.insertCell(4).textContent = subject.grade || '-';
                    });
                } else {
                    additionalContainer.style.display = 'none';
                }
            } else {
                additionalContainer.style.display = 'none';
            }
            
            // Calculate and update credits info including additional subjects
            let totalCreditsFromData = data ? data.totalCredits : 0;
            let additionalCredits = 0;
            
            if (data && data.subjects) {
                const additionalSubjects = data.subjects.filter(studentSubject => {
                    // Exclude if it matches a subject in the career plan
                    if (matchedSubjects.some(matched => matched.name === studentSubject.name)) {
                        return false;
                    }
                    
                    // Exclude English subjects and Vinculación con el Medio
                    const subjectName = studentSubject.name.toLowerCase();
                    if (subjectName.includes('inglés') || subjectName.includes('ingles') || subjectName.includes('english')) {
                        return false;
                    }
                    if (subjectName.includes('vinculación con el medio') || subjectName.includes('vinculacion con el medio')) {
                        return false;
                    }
                    
                    return true;
                });
                
                additionalCredits = additionalSubjects.reduce((sum, subject) => sum + (subject.credits || 0), 0);
            }
            
            // Update credits info with total including additional subjects
            const totalCreditsWithAdditional = totalCreditsFromData + additionalCredits;
            const requiredCredits = data ? data.requiredCredits : (currentCareerPlan ? currentCareerPlan.totalCredits : 0);
            
            // Calculate progress percentage, capping at 100%
            if (requiredCredits > 0) {
                progressPercentage = Math.min(100, (totalCreditsWithAdditional / requiredCredits) * 100);
            }
            
            // Update progress bar
            progressFill.style.width = progressPercentage + '%';
            progressText.textContent = Math.round(progressPercentage) + '%';
            
            // Update credits display
            document.getElementById('totalCredits').textContent = totalCreditsWithAdditional;
            document.getElementById('requiredCredits').textContent = requiredCredits;
            document.getElementById('remainingCredits').textContent = Math.max(0, requiredCredits - totalCreditsWithAdditional);
            
            // Update last update time
            if (data && data.lastUpdated) {
                const lastUpdate = new Date(data.lastUpdated);
                document.getElementById('updateStatus').textContent = 
                    `Última actualización: ${lastUpdate.toLocaleString('es-UY')}`;
            }
        }
        
        function updateRefreshButton(canRefresh, refreshesLeft) {
            const button = document.getElementById('refreshButton');
            const refreshesSpan = document.getElementById('refreshesLeft');
            
            refreshesSpan.textContent = refreshesLeft;
            button.disabled = !canRefresh;
            
            if (!canRefresh) {
                button.textContent = 'Límite de actualizaciones alcanzado';
            }
        }
        
        function updateFetchDataButton(canRefresh, refreshesLeft) {
            const button = document.getElementById('fetchDataButton');
            
            if (button) {
                button.disabled = !canRefresh;
                
                if (canRefresh) {
                    button.textContent = `Traer datos ahora (${refreshesLeft} disponibles)`;
                } else {
                    button.textContent = 'Límite de actualizaciones alcanzado';
                }
            }
        }
        
        function showPasswordModal() {
            document.getElementById('passwordModal').style.display = 'block';
            document.getElementById('passwordInput').value = '';
            document.getElementById('passwordInput').focus();
        }
        
        function closePasswordModal() {
            document.getElementById('passwordModal').style.display = 'none';
        }
        
        function refreshProgress() {
            const password = document.getElementById('passwordInput').value;
            
            if (!password) {
                alert('Por favor ingresa tu contraseña');
                return;
            }
            
            closePasswordModal();
            
            // Hide progress content and show loading message
            document.getElementById('progressContent').style.display = 'none';
            document.getElementById('noDataMessage').style.display = 'block';
            
            // Update the no data message to show it's updating
            const noDataMessage = document.getElementById('noDataMessage');
            noDataMessage.innerHTML = `
                <div class="refresh-info">
                    <p>Los datos de progreso académico se están actualizando...</p>
                    <p>Esto puede tomar unos segundos.</p>
                </div>
            `;
            
            document.getElementById('loadingIndicator').style.display = 'block';
            
            fetch('/auth/refresh-progress', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ password })
            })
            .then(response => response.json())
            .then(data => {
                document.getElementById('loadingIndicator').style.display = 'none';
                
                if (data.success) {
                    studentProgress = data.data;
                    displayProgress(data.data);
                    updateRefreshButton(data.manualRefreshesLeft > 0, data.manualRefreshesLeft);
                    updateFetchDataButton(data.manualRefreshesLeft > 0, data.manualRefreshesLeft);
                    document.getElementById('progressContent').style.display = 'block';
                    document.getElementById('noDataMessage').style.display = 'none';
                    
                    // Restore the original no data message in case it's needed later
                    document.getElementById('noDataMessage').innerHTML = `
                        <div class="refresh-info">
                            <p>Los datos de progreso académico se estan obteniendo en segundo plano.</p>
                            <p>Los datos se cargarán automáticamente en segundos.</p>
                            <button class="btn-refresh" id="fetchDataButton" onclick="showPasswordModal()" style="margin-top: 15px;">
                                Traer datos ahora
                            </button>
                        </div>
                    `;
                    
                    alert('Progreso académico actualizado exitosamente');
                } else {
                    // Show error and restore the content
                    document.getElementById('progressContent').style.display = 'block';
                    document.getElementById('noDataMessage').style.display = 'none';
                    alert(data.message || 'Error al actualizar progreso');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('loadingIndicator').style.display = 'none';
                // Show error and restore the content
                document.getElementById('progressContent').style.display = 'block';
                document.getElementById('noDataMessage').style.display = 'none';
                alert('Error al actualizar progreso académico');
            });
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('passwordModal');
            if (event.target == modal) {
                closePasswordModal();
            }
        }
        
        // Allow Enter key in password field
        document.addEventListener('DOMContentLoaded', function() {
            const passwordInput = document.getElementById('passwordInput');
            if (passwordInput) {
                passwordInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        refreshProgress();
                    }
                });
            }
        });
    </script>
</body>
</html>